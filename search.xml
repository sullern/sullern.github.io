<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/03/15/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>线性表</title>
    <url>/2025/03/15/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="线性表的特点："><a href="#线性表的特点：" class="headerlink" title="线性表的特点："></a>线性表的特点：</h2><ul>
<li>相同的数据元素（说明所有数据元素所占用的空间是一样大的）</li>
<li>有次序，有限性</li>
<li>有前驱（直接前驱），有后继（直接后继）并且都是有且仅有</li>
</ul>
<h2 id="c语言实现动态分配内存"><a href="#c语言实现动态分配内存" class="headerlink" title="c语言实现动态分配内存"></a>c语言实现动态分配内存</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 100<span class="comment">//表的初始长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;<span class="comment">//ElemType在表中为int型(typedef的作用就是取别名增加代码的可读性，比如这里就是将int型取一个别名，现在可以将ElemType看作是int的型，也是占用4个字节)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line">ElemType *data;<span class="comment">//指示动态分配数组的指针（int型的指针）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> MAXSIZE;<span class="comment">//分配数组的最大长度</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line"></span><br><span class="line">}SeqList;<span class="comment">//动态分配数组顺序表的类型定义</span></span><br><span class="line"></span><br><span class="line">SeqList L;<span class="comment">//定义一个顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SeqList *L)</span>{</span><br><span class="line"></span><br><span class="line">L-&gt;length=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态分配数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IncreaseSize</span><span class="params">(SeqList *L,<span class="type">int</span> len)</span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p=L-&gt;data;<span class="comment">//p指向原来的数组，将原来的数组的内存地址给p</span></span><br><span class="line"></span><br><span class="line">L-&gt;data=(ElemType *)<span class="built_in">malloc</span>((L-&gt;MAXSIZE+len)*<span class="keyword">sizeof</span>(ElemType));<span class="comment">//分配一个新的数组，计算新的数组的内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L-&gt;length;i++){</span><br><span class="line"></span><br><span class="line">L-&gt;data[i]=p[i];<span class="comment">//将原来的数组（当前长度的数组）复制到新的数组</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">L-&gt;MAXSIZE=L-&gt;MAXSIZE+len;<span class="comment">//改变数组的最大长度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(p);<span class="comment">//释放原来的数组，申请了空间记得释放掉</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//但是时间开销很大</span></span><br></pre></td></tr></table></figure></div>
<h2 id="顺序表的插入操作"><a href="#顺序表的插入操作" class="headerlink" title="顺序表的插入操作"></a>顺序表的插入操作</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 100<span class="comment">//表的初始长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;<span class="comment">//ElemType在表中为int型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line"></span><br><span class="line">ElemType *data;<span class="comment">//指示动态分配数组的指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> MAXSIZE;<span class="comment">//分配数组的最大长度</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line"></span><br><span class="line">}SeqList;<span class="comment">//动态分配数组顺序表的类型定义</span></span><br><span class="line"></span><br><span class="line">SeqList L;<span class="comment">//定义一个顺序表</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SeqList *L)</span>{</span><br><span class="line"></span><br><span class="line">L-&gt;length=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//c语言不支持bool类型，所有要加入头文件stdbool.h</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(SeqList *L,<span class="type">int</span> i,ElemType e)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入的三个变量，一个是顺序表，一个是插入的位置，一个是插入的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;length+<span class="number">1</span>)<span class="comment">//i如果小于1或者大于表长加1，返回false</span></span><br><span class="line"><span class="comment">//由于顺序表的特点，必须是逻辑结构和存储结构都必须相邻在一起，所以在末尾插入的时候只能+1的插入，如果+2则就不相邻，那么就不是线性表</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(L-&gt;length&gt;=L-&gt;MAXSIZE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L-&gt;length;j&gt;=i;j--)   </span><br><span class="line"></span><br><span class="line"><span class="comment">//为什么是L-&gt;length而不是L-&gt;length+1？</span></span><br><span class="line"><span class="comment">//因为这里用的是顺序表的位置（其开始位置是1而不是0），从整个顺序表的真实长度开始算，一直相减到需要插入的位置</span></span><br><span class="line"><span class="comment">//顺序表元素索引从0开始，而插入位置i从1开始计数，需要转换为数组索引`i-1`</span></span><br><span class="line"><span class="comment">//L-&gt;length表示当前存储的元素数量，maxsize表示最大大小，如果是length=maxsize,那么在数组中的索引范围为[0，maxsize-1]，在已满的情况下插入会越界，超过masize的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里为什么是j--?为什么不能改为j++?</span></span><br><span class="line"><span class="comment">//因为插入是将元素往后移动，如果改为j++，数组将变为从前向后遍历数组，会将本身存储在后面的元素给覆盖掉。</span></span><br><span class="line"><span class="comment">//如果实在要改为从前面遍历数组，确保你已经为新元素腾出了空间，并且不会覆盖原有数据，由此实现j++</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">L-&gt;data[i]=L-&gt;data[i<span class="number">-1</span>];<span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">L-&gt;data[i<span class="number">-1</span>]=e;<span class="comment">//在位置i处放入e</span></span><br><span class="line"></span><br><span class="line">L-&gt;length++;<span class="comment">//表长加1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<p><strong>线性表中的位序是由1开始的，但是在数组中，元素的下标是从0开始的</strong></p>
<table>
<thead>
<tr>
<th>数组下标</th>
<th>顺序表</th>
<th>内存地址</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>loc(A)</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>loc(A)+sizeof(Elemtype)</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
<td>loc(A)+2sizeof(Elemtype)</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>loc(A)+3sizeof(Elemtype)</td>
</tr>
<tr>
<td>……</td>
<td>……</td>
<td>……</td>
</tr>
<tr>
<td>n-1</td>
<td>n</td>
<td>loc(A)+(n-1)sizeof(Elemtype)</td>
</tr>
<tr>
<td>maxsize-1</td>
<td>maxsize</td>
<td></td>
</tr>
</tbody></table>
<p><strong>所以说如果在第n个位置添加一个元素e，其中第n个元素的位置的数组的下标是n-1，所以需要把n-1乃至后面的数据全部像后面移动一位，所以代码为：</strong></p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">L-&gt;data[n]=L-&gt;data[n<span class="number">-1</span>]<span class="comment">//将n-1位置的数据赋值给n</span></span><br></pre></td></tr></table></figure></div>
<h2 id="顺序表删除操作"><a href="#顺序表删除操作" class="headerlink" title="顺序表删除操作"></a>顺序表删除操作</h2><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 100<span class="comment">//表的初始长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;<span class="comment">//ElemType在表中为int型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>{</span><br><span class="line"></span><br><span class="line">ElemType *data;<span class="comment">//指示动态分配数组的指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> MAXSIZE;<span class="comment">//分配数组的最大长度</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line"></span><br><span class="line">}SeqList;<span class="comment">//动态分配数组顺序表的类型定义</span></span><br><span class="line"></span><br><span class="line">SeqList L;<span class="comment">//定义一个顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SeqList *L)</span></span>{</span><br><span class="line"></span><br><span class="line">L-&gt;length=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DestroyList</span><span class="params">(SeqList &amp;L,<span class="type">int</span> i,<span class="type">int</span> &amp;e)</span></span>{</span><br><span class="line"><span class="comment">//i表示删除的元素的位置，&amp;e把main函数中的e的元素给引用起来，实参传递</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">e=L.data[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;L.length;j++)</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="顺序表的查找操作"><a href="#顺序表的查找操作" class="headerlink" title="顺序表的查找操作"></a>顺序表的查找操作</h2><h3 id="1-按位查找"><a href="#1-按位查找" class="headerlink" title="1) 按位查找"></a>1) 按位查找</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//按位查找</span></span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(SeqList &amp;L,<span class="type">int</span> i)</span></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="2）按值查找"><a href="#2）按值查找" class="headerlink" title="2）按值查找"></a>2）按值查找</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(SeqList &amp;L,ElemType &amp;e)</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++){</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(L.data[i]==e){</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> i<span class="number">+1</span>;</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>线性表</tag>
      </tags>
  </entry>
</search>
